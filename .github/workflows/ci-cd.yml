name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Compile project
      run: mvn clean compile
      
    - name: Run unit tests
      run: mvn test
      
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-reports
        path: target/surefire-reports/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'run-integration-tests')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Compile project
      run: mvn clean compile test-compile
      
    - name: Run integration tests
      run: mvn test -Dtest="**/*IT"
      
    - name: Upload integration test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-reports
        path: target/surefire-reports/

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Compile with warnings
      run: mvn clean compile -Xlint:deprecation -Xlint:unchecked

  package:
    name: Package Artifact
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Package application
      run: mvn clean package -DskipTests
      
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: legacy-jar
        path: target/*.jar

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [unit-tests, package]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: legacy-jar
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Artifact: $(ls -la *.jar)"
        echo "Add your staging deployment commands here"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, package]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: legacy-jar
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Artifact: $(ls -la *.jar)"
        echo "Add your production deployment commands here"
